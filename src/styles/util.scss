/*
 * Took the idea of --tg-space and ran with it, this allows us to standardise values in css,
 * a good codebase is a consistent one, no more random percentages floating about in stylesheets.
 *
 * This is essentially our own cut down version of tailwind.
 */

@use "sass:map";

/* Base spacing unit */
$single: 1rem;

/* Spacing values map */
$spaces: (
  0: 0,
  1: $single * 0.25,
  2: $single * 0.5,
  3: $single,
  4: $single * 1.5,
  5: $single * 3,
  10: $single * 6,
  20: $single * 12,
);

/* Percentage breakpoints */
$percentage-breakpoints: (
  0: 0,
  2: 2%,
  5: 5%,
  10: 10%,
  20: 20%,
  25: 25%,
  30: 30%,
  40: 40%,
  50: 50%,
  60: 60%,
  75: 75%,
  80: 80%,
  90: 90%,
  100: 100%
);

/* Base font size unit */
$base: 1rem;

$font-sizes: (
  xxxsmall: $base * 0.62,
  xxsmall: $base * 0.70,
  xsmall: $base * 0.8,
  small: $base * 0.875,
  medium: $base,
  large: $base * 1.25,
  xlarge: $base * 1.5,
  xxlarge: $base * 2,
  xxxlarge: $base * 2.5,
);

/* Define font weights */
$font-weights: (
  400: 400,
  500: 500,
  600: 600,
  700: 700,
  800: 800,
  900: 900,
);

/* Define line sets */
$line-set: (
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
);


/* Generate font-size classes */
@each $key, $size in $font-sizes {
    .#{$key} {
      font-size: $size !important;
    }
  }

/* Generate font-weight classes */
@each $weight, $value in $font-weights {
    .weight-#{$weight} {
      font-weight: $value !important;
    }
}

@each $line, $value in $line-set {
  .overflow-ellipsis-#{$line} {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $value;
    line-clamp: $value;
    -webkit-box-orient: vertical;
  }
}


/*
 * Generate CSS variables for spacers, fonts and breakpoints.
 * These will be accessed through:
 *   var(--space-...)
 *   var(--width-...)
 *   var(--weight-...)
 *   var(--font-size-...)
 */
:root {
    @each $k, $space in $spaces {
      --space-#{$k}: #{$space};
    }
    @each $k, $width in $percentage-breakpoints {
      --width-#{$k}: #{$width};
    }
    @each $k, $width in $font-weights {
      --weight-#{$k}: #{$width};
    }
    @each $k, $width in $font-sizes {
      --font-size-#{$k}: #{$width};
    }
  }

/* Map to hold references to CSS variables for spacers */
$varred-spacers: ();
@each $k in map.keys($spaces) {
  $varred-spacers: map.set($varred-spacers, $k, var(--space-#{$k}));
}

$varred-widths: ();
@each $k in map.keys($percentage-breakpoints) {
  $varred-widths: map.set($varred-widths, $k, var(--width-#{$k}));
}

/* mappings for generating utility classes */
$mappings: (
  /* Margin utilities */
  margin-bottom: (clazz: mb, values: $varred-spacers),
  margin-left: (clazz: ml, values: $varred-spacers),
  margin-right: (clazz: mr, values: $varred-spacers),
  margin-top: (clazz: mt, values: $varred-spacers),
  margin-top-bottom: (clazz: mtb, values: $varred-spacers),
  margin: (clazz: m, values: $varred-spacers),

  /* Padding utilities */
  padding-bottom: (clazz: pb, values: $varred-spacers),
  padding-left: (clazz: pl, values: $varred-spacers),
  padding-right: (clazz: pr, values: $varred-spacers),
  padding-top: (clazz: pt, values: $varred-spacers),
  padding-top-bottom: (clazz: ptb, values: $varred-spacers),
  padding: (clazz: p, values: $varred-spacers),

  /* Width utilities */
  max-width: (clazz: mw, values: $percentage-breakpoints),
  width: (clazz: w, values: $percentage-breakpoints),
  height: (clazz: h, values: $percentage-breakpoints),

  border-radius: (clazz: br, values: $percentage-breakpoints),
);

/* Generate utility classes */
@each $prop, $spec in $mappings {
  @each $value_alias, $value in map.get($spec, "values") {
    @if ($prop == margin-top-bottom) {
      .#{map.get($spec, "clazz")}-#{$value_alias} {
        margin-top: #{$value} !important;
        margin-bottom: #{$value} !important;
      }
    } @else if ($prop == padding-top-bottom) {
      .#{map.get($spec, "clazz")}-#{$value_alias} {
        padding-top: #{$value} !important;
        padding-bottom: #{$value} !important;
      }
    } @else {
      .#{map.get($spec, "clazz")}-#{$value_alias} {
        #{$prop}: #{$value} !important;
      }
    }
  }
}

/* CSS Rules */
.text-center {
  text-align: center;
}

.m-a {
  margin: auto;
}

.danger {
  color: var(--ion-color-danger)
}

.lower {
  text-transform: lowercase;
}

.upper {
  text-transform: uppercase;
}

.flex {
  justify-content: flex-end;
  align-content: center;
  flex-direction: column;
}

.space-between {
  display: flex;
  justify-content: space-between;
  text-align: center;
}
